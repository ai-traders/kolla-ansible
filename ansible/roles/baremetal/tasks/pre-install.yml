---
- file:
    path: /var/ait/scripts
    state: directory
- name: Install script to configure custom routing
  template:
    src: setup-custom-routing.sh.j2
    dest: /var/ait/scripts/setup-custom-routing.sh
    mode: 0755
    owner: root
    group: root
  when: (in_docker | bool) or (inventory_hostname in groups["network"])

- name: configure custom routing
  command: /var/ait/scripts/setup-custom-routing.sh
  when: (in_docker | bool) or (inventory_hostname in groups["network"])

- name: mount tmpfs for ansible transfers
  command: "mount -t tmpfs -o size=32M tmpfs /root/.ansible"
  when:
    - in_docker | bool
    - ansible_connection == 'docker'

- name: remove docker debian apt repository
  file:
    path: /etc/apt/sources.list.d/docker.list
    state: absent
  when: not enable_ait_docker_mirror
  
# NOTE: raw install is required to support cloud images which do not have python installed
- name: "Install python2 python-simplejson iproute2"
  become: True
  raw: "yum install -y python python-simplejson || (apt-get update && apt-get install -y python2.7 python-simplejson iproute2)"

- name: Gather facts
  setup:

- name: Ensure localhost in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^127.0.0.1.*"
    line: "127.0.0.1 localhost"
    state: present
  become: True
  when: customize_etc_hosts | bool

- name: Generate /etc/hosts for all of the nodes
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE GENERATED HOSTS"
    block: |
        {% for host in groups['baremetal'] %}
        {% set api_interface = hostvars[host]['api_interface'] %}
        {% if host not in groups['bifrost'] or 'ansible_' + api_interface in hostvars[host] %}
        {{ hostvars[host]['ansible_' + api_interface]['ipv4']['address'] }} {{ hostvars[host]['ansible_hostname'] }}
        {% endif %}
        {% endfor %}
  become: True
  when:
    - customize_etc_hosts | bool
    # Skip hosts in the bifrost group that do not have a valid api_interface.
    - inventory_hostname not in groups['bifrost'] or
      'ansible_' + hostvars[inventory_hostname]['api_interface'] in hostvars[inventory_hostname]

- name: Ensure sudo group is present
  group: name=sudo state=present
  become: True

- name: Ensure kolla group is present
  group: name=kolla state=present
  become: True
  when: create_kolla_user | bool

- name: Create kolla user
  user:
    name: kolla
    state: present
    group: kolla
    groups: "sudo"
  become: True
  when: create_kolla_user | bool

- name: Grant kolla user passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^kolla'
    line: 'kolla ALL=(ALL) NOPASSWD: ALL'
  become: True
  when: create_kolla_user | bool

- name: Add public key to kolla user authorized keys
  authorized_key:
    user: kolla
    key: "{{ kolla_ssh_key.public_key }}"
  become: True
  when: create_kolla_user | bool

- name: Install apt packages
  command: apt-get update
  become: True
  when: ansible_os_family == 'Debian'

- name: Install ubuntu ca certs
  package: name={{item}} state=latest
  become: True
  with_items:
    - ca-certificates
    - apt-transport-https
  when:
    - ansible_os_family == 'Debian'

- name: Ensure apt sources list directory exists
  file: path=/etc/apt/sources.list.d state=directory recurse=yes
  become: True
  when: ansible_os_family == 'Debian'

- name: add docker gpg apt key
  apt_key:
    url: http://apt-docker.ai-traders.com/pubkey.gpg
    state: present
  when: enable_ait_docker_mirror

- name: add docker debian apt repository
  copy:
    content: deb [arch=amd64] http://apt-docker.ai-traders.com/docker-new/ubuntu-xenial ubuntu-xenial main
    dest: /etc/apt/sources.list.d/docker.list
  when: enable_ait_docker_mirror

- name: Enable docker repo apt
  template:
    src: docker_apt_repo.j2
    dest: /etc/apt/sources.list.d/docker.list
  become: True
  when:
    - ansible_os_family == 'Debian'
    - not enable_ait_docker_mirror

- name: Install docker apt gpg key
  apt_key:
    url: "{{ docker_apt_url }}/gpg"
    id: "{{ docker_apt_key_id }}"
    state: present
  become: True
  when:
    - ansible_os_family == 'Debian'
    - ansible_distribution == 'Ubuntu'
    - not enable_ait_docker_mirror

- name: apt update
  apt: update_cache=yes

- name: Ensure yum repos directory exists
  file: path=/etc/yum.repos.d/ state=directory recurse=yes
  become: True
  when: ansible_os_family == 'RedHat'

- name: Enable docker repo yum
  become: True
  template:
    src: docker_yum_repo.j2
    dest: /etc/yum.repos.d/docker.repo
  when: ansible_os_family == 'RedHat'

- name: Install docker rpm gpg key
  rpm_key:
    state: present
    key: "{{ docker_yum_url }}/gpg"
  become: True
  when: ansible_os_family == 'RedHat'

- name: Ensure node_config_directory directory exists
  file:
    path: "{{ node_config_directory }}"
    state: directory
    recurse: yes
    owner: kolla
    group: kolla
    mode: 0755
  become: True
  when: create_kolla_user | bool

- name: Ensure node_config_directory directory exists
  file:
    path: "{{ node_config_directory }}"
    state: directory
    recurse: yes
    mode: 0644
  become: True
  when: not create_kolla_user | bool
